import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import cookieParser from 'cookie-parser';
import { engine } from 'express-handlebars';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import Redis from 'ioredis';
import { rateLimit } from 'express-rate-limit';
import { RedisStore } from 'rate-limit-redis';
import { createClient } from '@supabase/supabase-js';
import router from './routes/router.js';
import reviewRouter from './routes/reviews.js';
import { adminAuth } from './middleware/adminAuth.js';

// Configuration
dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const app = express();
const PORT = process.env.PORT || 3000;

// Supabase client setup
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Redis setup
const redisClient = new Redis();
redisClient.on('error', (err) => console.log('Redis Client Error', err));
redisClient.on('connect', () => console.log('Connected to Redis'));

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(helmet({
  contentSecurityPolicy: false,
}));

// Set up Handlebars view engine
app.engine('handlebars', engine());
app.set('view engine', 'handlebars');
app.set('views', path.join(__dirname, 'views'));

// Debugging logs for views and routes
console.log('Views directory:', path.join(__dirname, 'views'));
console.log('Available routes:');
console.log('- GET /');
console.log('- GET /admin-login');
console.log('- POST /admin-login');
console.log('- GET /admin-dashboard');
console.log('- GET /admin-logout');
console.log('- API routes under /api/v1');

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// Rate limiting
const limiter = rateLimit({
  windowMs: 24 * 60 * 60 * 1000, // 24 hours
  max: 5, // Limit each IP to 5 requests per windowMs
  standardHeaders: true,
  legacyHeaders: false,
  store: new RedisStore({
    sendCommand: (...args) => redisClient.call(...args),
    prefix: 'rate-limit:'
  }),
  skip: (req) => {
    return req.path.startsWith('/admin') || 
           req.path === '/admin-login' || 
           req.path === '/';
  },
  message: (req, res) => {
    return {
      error: "Rate limit exceeded",
      tier_info: {
        current_tier: "free",
        limit: 5,
        current_count: req.rateLimit.current,
        window_size: "86400 seconds (24 hours)",
        reset_after: Math.max(0, req.rateLimit.resetTime - Date.now()) / 1000
      },
      upgrade_options: {
        next_tier: "active",
        benefits: [
          "20 requests/day",
          "Meal planning",
          "Basic nutrition insights"
        ]
      }
    };
  }
});

// Apply rate limiting to API routes only
app.use('/api', limiter);

// Routes
app.get('/', (req, res) => {
  res.render('home');
});

// Admin Login Page
app.get('/admin-login', (req, res) => {
  res.render('admin-login');
});

// Admin Login Process
app.post('/admin-login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Authenticate with Supabase
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    if (error) {
      return res.status(401).render('admin-login', { error: error.message });
    }
    
    // Check if user has admin role
    const { data: roles, error: rolesError } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_id', data.user.id)
      .single();
    
    if (rolesError || !roles || roles.role !== 'admin') {
      await supabase.auth.signOut();
      return res.status(403).render('admin-login', { error: 'You do not have administrator privileges' });
    }
    
    // Set token in cookie for future requests
    res.cookie('supabase_auth_token', data.session.access_token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
    });
    
    res.redirect('/admin-dashboard');
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).render('admin-login', { error: 'Internal server error during login' });
  }
});

// Admin Dashboard (protected by adminAuth middleware)
app.get('/admin-dashboard', adminAuth, (req, res) => {
  res.render('admin-dashboard', { user: req.user });
});

// Admin Logout
app.get('/admin-logout', (req, res) => {
  res.clearCookie('supabase_auth_token');
  res.redirect('/admin-login');
});

// API Routes
app.use('/api/v1', router);
app.use('/api/v1/reviews', reviewRouter);

// Error handling
app.use((req, res, next) => {
  res.status(404).json({ error: 'Not Found' });
});

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal Server Error', message: err.message });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Main API: http://localhost:${PORT}/api/v1`);
  console.log(`Reviews API: http://localhost:${PORT}/api/v1/reviews`);
  console.log(`Admin login: http://localhost:${PORT}/admin-login`);
});

export default app;


