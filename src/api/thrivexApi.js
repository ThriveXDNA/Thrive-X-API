import { supabase } from '../config/supabase';

// NPI Directory Search
export async function searchNPIDirectory({ npi, name, location }) {
  let query = supabase
    .from('npi_directory')
    .select('*');
  
  if (npi) query = query.eq('npi_number', npi);
  if (name) query = query.ilike('provider_name', `%${name}%`);
  if (location) query = query.containedBy('location', location);
  
  return await query;
}

// Workout Plan Generation
export async function generateWorkoutPlan(userData) {
  const { data: userTier } = await supabase
    .from('users')
    .select('subscription_tier')
    .eq('id', userData.userId)
    .single();

  const maxWorkoutsPerWeek = {
    free: 3,
    active: 5,
    growth: 6,
    thrive: 7
  }[userTier.subscription_tier];

  const adjustedPlan = {
    ...userData,
    schedule: {
      ...userData.schedule,
      days_per_week: Math.min(userData.schedule.days_per_week, maxWorkoutsPerWeek)
    }
  };

  return await supabase
    .from('workout_plans')
    .insert([adjustedPlan])
    .select();
}

// Food Analysis
export async function analyzeFoodPlate(imageUrl, imageFile) {
  const { data: imageData } = await supabase
    .storage
    .from('food_images')
    .upload(`${Date.now()}-analysis.jpg`, imageFile);

  // Placeholder for LLM integration
  const analysis = {
    // This would be replaced with actual LLM analysis
    imageUrl: imageData.path,
    analysisDate: new Date()
  };

  return analysis;
}

// Nutrition Advice
export async function getNutritionAdvice({
  goal,
  dietary_restrictions,
  current_weight,
  target_weight,
  daily_activity_level
}) {
  const { data: recommendedFoods } = await supabase
    .from('food_items')
    .select('*')
    .order('carnivore_diet_rating', { ascending: false })
    .order('protein_content', { ascending: false })
    .limit(20);

  return {
    recommended_foods: recommendedFoods,
    meal_plan: null, // Will be generated by LLM
    supplementation: null // Will be generated by LLM
  };
}

// Review Management
export async function addReview({
  userId,
  contentType,
  contentId,
  rating,
  comment
}) {
  return await supabase
    .from('reviews')
    .insert([{
      user_id: userId,
      content_type: contentType,
      content_id: contentId,
      rating,
      comment
    }])
    .select();
}

// Subscription Management
export async function updateSubscription({
  userId,
  newTier
}) {
  return await supabase
    .from('users')
    .update({
      subscription_tier: newTier,
      subscription_end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
    })
    .eq('id', userId)
    .select();
}